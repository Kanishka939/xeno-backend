generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]
  stores    Store[]
  customers Customer[]
  products  Product[]
  orders    Order[]
  lineItems OrderLineItem[]
  abandons  AbandonedCheckout[]
  webhooks  WebhookLog[]
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tenantId  String
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  sessions  Session[]
}

model Session {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  token         String   @unique
  createdAt     DateTime @default(now())
  expiresAt     DateTime
  lastIp        String?
  lastUserAgent String?
}

model LoginToken {
  id        String   @id @default(cuid())
  email     String
  code      String
  createdAt DateTime @default(now())
  expiresAt DateTime
  consumed  Boolean  @default(false)
}

model Store {
  id            String    @id @default(cuid())
  tenantId      String
  tenant        Tenant    @relation(fields: [tenantId], references: [id])
  shopDomain    String    @unique
  accessToken   String
  scopes        String
  installedAt   DateTime  @default(now())
  uninstalledAt DateTime?
  apiVersion    String
  webhooksSetAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  syncCursors SyncCursor[]
  customers   Customer[]
  products    Product[]
  orders      Order[]
  abandons    AbandonedCheckout[]
  webhooks    WebhookLog[]
}

model OAuthState {
  id         String   @id @default(cuid())
  state      String   @unique
  shopDomain String
  tenantId   String
  createdAt  DateTime @default(now())
  expiresAt  DateTime
}

model SyncCursor {
  id       String    @id @default(cuid())
  storeId  String
  store    Store     @relation(fields: [storeId], references: [id])
  resource String
  cursor   String?
  lastSync DateTime?
  status   String    @default("idle")

  @@unique([storeId, resource])
}

model Customer {
  id             String   @id @default(cuid())
  tenantId       String
  tenant         Tenant   @relation(fields: [tenantId], references: [id])
  storeId        String
  store          Store    @relation(fields: [storeId], references: [id])
  shopifyId      String
  email          String?
  firstName      String?
  lastName       String?
  phone          String?
  numberOfOrders Int?
  totalSpent     Decimal? @db.Decimal(18, 2)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  orders Order[]

  @@unique([tenantId, shopifyId])
  @@index([storeId])
}

model Product {
  id             String   @id @default(cuid())
  tenantId       String
  tenant         Tenant   @relation(fields: [tenantId], references: [id])
  storeId        String
  store          Store    @relation(fields: [storeId], references: [id])
  shopifyId      String
  title          String
  vendor         String?
  productType    String?
  status         String?
  totalInventory Int?
  priceMin       Decimal? @db.Decimal(18, 2)
  priceMax       Decimal? @db.Decimal(18, 2)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  lineItems OrderLineItem[]

  @@unique([tenantId, shopifyId])
  @@index([storeId])
}

model Order {
  id                String    @id @default(cuid())
  tenantId          String
  tenant            Tenant    @relation(fields: [tenantId], references: [id])
  storeId           String
  store             Store     @relation(fields: [storeId], references: [id])
  shopifyId         String
  name              String?
  processedAt       DateTime?
  currency          String?
  subtotalPrice     Decimal?  @db.Decimal(18, 2)
  totalShipping     Decimal?  @db.Decimal(18, 2)
  totalTax          Decimal?  @db.Decimal(18, 2)
  totalRefunded     Decimal?  @db.Decimal(18, 2)
  currentTotalPrice Decimal?  @db.Decimal(18, 2)
  financialStatus   String?
  fulfillmentStatus String?
  customerId        String?
  customer          Customer? @relation(fields: [customerId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  lineItems OrderLineItem[]

  @@unique([tenantId, shopifyId])
  @@index([storeId])
  @@index([processedAt])
}

model OrderLineItem {
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String?
  product   Product? @relation(fields: [productId], references: [id])
  shopifyId String?
  title     String?
  quantity  Int?
  price     Decimal? @db.Decimal(18, 2)

  @@index([orderId])
}

model AbandonedCheckout {
  id          String    @id @default(cuid())
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  storeId     String
  store       Store     @relation(fields: [storeId], references: [id])
  shopifyId   String
  email       String?
  totalPrice  Decimal?  @db.Decimal(18, 2)
  abandonedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([tenantId, shopifyId])
}

model WebhookLog {
  id         String   @id @default(cuid())
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  storeId    String?
  store      Store?   @relation(fields: [storeId], references: [id])
  topic      String
  success    Boolean  @default(true)
  receivedAt DateTime @default(now())
  payload    Json?
}
